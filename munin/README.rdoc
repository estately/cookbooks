= DESCRIPTION:

Install and configure munin

= DEFINITIONS:

* munin_plugin

The munin_plugin definition allows you to specify which plugins you'd
like to enable. Usage is simple:

  munin_plugin "apt"
  munin_plugin( "http_loadtime" ) { action :disable }

You can also set up wildcard plugins. The following example installs the
"if_" plugin as "if_eth0":

  munin_plugin( "if_eth0" ) { plugin "if_" }

= USAGE:

=== Munin Master

To configure a node to be the munin master:

  include_recipe "munin::master"

By default, munin will be set up to monitor any host that has the
+monitored+ role. If you want to monitor other hosts, you should look
configure them in the additional_hosts attribute, described below.

You may be interested in the auth_enabled and ssl_enabled attributes;
if you want to use them, you'll need to create a digest auth
file and/or SSL cert, named hostname.domain.digest_passwds or
hostname.domain.pem. You should create a munin cookbook in your private
cookbooks directory and put those files in munin/files/default.

=== Munin Node

To configure a node to be monitored by munin:

  include_recipe "munin::node"

When run, the munin::node recipe looks at the node's runlist and will
automatically run any recipes that match items in the runlist. For
instance, if munin::node is run on a node that has postgresql::server
in its runlist, the munin::postgresql_server recipe will be run as
well. Note that the :: in the original recipe name is translated to an
underscore.

In addition, by default, this recipe will enable the following plugins:

 * acpi
 * cpu
 * cpuspeed
 * df
 * df_inode
 * diskstats
 * entropy
 * forks
 * if_err_eth0:if_err_
 * if_eth0:if_
 * interrupts
 * iostat
 * iostat_ios
 * irqstats
 * load
 * memory
 * open_files
 * open_inodes
 * proc_pri
 * processes
 * swap
 * threads
 * uptime
 * users
 * vmstat

... and disable the following plugins:

 * fw_conntrack
 * fw_forwarded_local
 * fw_packets
 * http_loadtime

Other plugins may be installed by default on your system.

= ATTRIBUTES

=== Simple Attributes

munin.hostname:: the name of the machine running the munin master. Used
                 to set up the apache vhost. Defaults to 'munin'.

munin.domain:: your domain. used variously to configure groups in
               munin's output, set up the apache vhost, and the like.
               Defaults to 'example.com'

munin.htmldir:: the directory munin should write its HTML to. Defaults
                to /var/www/munin.

munin.auth_enabled:: whether to use digest auth. See above, defaults
                     to false.

munin.ssl_enabled:: whether to use SSL. See above, defaults to false.

munin.alerts.enabled:: whether to send alerts. Defaults to false.

munin.alerts.email_address:: where to send email alerts. Defaults to
                             nowhere@example.com.

munin.alerts.email_subject:: subject line for emails. Defaults to "Munin
                             alert for ${var:host}".

munin.alerts.thresholds:: an array of strings representing alerting
                          thresholds, like "apt_all.pending_stable.warning 5".
                          Defaults empty.

munin.alerts.by_host:: a hash of FQDNs => alert threshold strings as
                       defined above. These will only be applied on the
                       the matching host. Defaults empty.

=== "Special" Attributes

There are two attributes that require some additional explanation.
First, some background: munin represents hosts in a tree. For instance,
ours looks something like this (names have been changed):

estately.com
├── production
│   ├── admin
│   │   ├── andrew
│   │   ├── beatrice
│   │   └── geoffrey
│   ├── appserver
│   │   └── glenn
│   ├── database
│   │   └── marcus
│   ├── other
│   │   └── katrina
│   └── worker
│       └── lisa
└── staging
    └── other
        ├── amy
        └── oren

The "production" and "staging" are the node's app_environment value,
"admin", "appserver", etc are the munin.group. You can ignore this if
you want; everything will end up in the "other" group.

The other attribute of interest is munin.additional_hosts. If you want
to monitor hosts that aren't managed by chef, or for various reasons
don't have the monitored role, you can add hashes to this array. Here's
a snippet from our monitoring role:

default_attributes "munin" => {
  "additional_hosts" => [
    { "fqdn" => "beatrice", "group" => "admin", "app_environment" => "production" },
    { "fqdn" => "glenn",    "group" => "admin", "app_environment" => "production" }
  ]
}

= LICENSE

Copyright 2010-2011, Estately, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
